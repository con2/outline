# Kubernetes template for Outline wiki
# usage: emrichen outline.in.yml | kubectl apply -n outline -f -

!Defaults
outline_public_hostname: outline.127.0.0.1.xip.io
outline_url: !Format http://{outline_public_hostname}
outline_tag: latest
outline_image: !Format con2/outline:{outline_tag}


#########
# REDIS #
#########
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: outline
    service: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: outline
    service: redis

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: outline
      service: redis
  replicas: 1
  template:
    metadata:
      labels:
        app: outline
        service: redis
    spec:
      containers:
      - name: master
        image: redis
        resources: {}
        ports:
        - containerPort: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: outline
    service: redis
  name: redis-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1000Mi


##############
# POSTGRESQL #
##############
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: outline
    service: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: outline
    service: postgres

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: outline
      service: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: outline
        service: postgres
    spec:
      containers:
      - name: master
        image: postgres
        resources: {}
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: outline
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-data
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - outline
          initialDelaySeconds: 3
          periodSeconds: 3
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - outline
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: outline
    service: postgres
  name: postgres-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1000Mi

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres
  labels:
    app: outline
    service: postgres
  annotations:
    secret-generator.v1.mittwald.de/autogenerate: password
type: Opaque
data:
  # username: outline
  username: b3V0bGluZQ==


###########
# OUTLINE #
###########
---
apiVersion: v1
kind: Service
metadata:
  name: outline
  labels:
    app: outline
    component: outline
spec:
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: outline
    component: outline

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: outline
spec:
  selector:
    matchLabels:
      app: outline
      component: outline
  replicas: 1
  template:
    metadata:
      labels:
        app: outline
        component: outline
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: master
        image: !Var outline_image
        imagePullPolicy: Always
        resources: {}
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: production
        - name: OUTLINE_POSTGRESQL_HOSTNAME
          value: postgres
        - name: OUTLINE_POSTGRESQL_DATABASE
          value: outline
        - name: OUTLINE_POSTGRESQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres
              key: username
        - name: OUTLINE_POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: password
        - name: REDIS_URL
          value: redis://redis:6379
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: outline
              key: secretKey
        - name: LOCAL_AUTH_ENABLED
          value: "true"
        - name: URL
          value: !Var outline_url
        - name: UPDATES
          value: "false"
        - name: AWS_ACCESS_KEY_ID
          value: notcheckedindev
        - name: AWS_SECRET_ACCESS_KEY
          value: notcheckedindev
        - name: AWS_S3_UPLOAD_BUCKET_URL
          value: http://s3
        - name: AWS_S3_UPLOAD_BUCKET_NAME
          value: outline-dev
        - name: AWS_S3_UPLOAD_MAX_SIZE
          value: "26214400"
        volumeMounts:
        - mountPath: /home/outline
          name: outline-cache
      volumes:
      - name: outline-cache
        emptyDir:
          medium: Memory
---
apiVersion: v1
kind: Secret
metadata:
  name: outline
  labels:
    app: outline
type: Opaque
data:
  # FIXME Hardcoded secret_key due to kubernetes-secret-generator not generating a string that matches the requirements of Outline
  secretKey: !Base64 "6af02a65877acf8d60deaf4c88a2c7cf0480f2d462612437bf8bacce81938c99"

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: outline
spec:
  rules:
    - host: !Var outline_public_hostname
      http:
        paths:
        - path: /
          backend:
            serviceName: outline
            servicePort: 80


###########
# FAKE-S3 #
###########
# FIXME Instead of Fake-S3, we should use either the real thing or some production-ready S3 implementation.
---
apiVersion: v1
kind: Service
metadata:
  name: s3
  labels:
    app: outline
    service: s3
spec:
  ports:
  - port: 80
    targetPort: 4569
  selector:
    app: outline
    service: s3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: s3
spec:
  selector:
    matchLabels:
      app: outline
      service: s3
  replicas: 1
  template:
    metadata:
      labels:
        app: outline
        service: s3
    spec:
      containers:
      - name: master
        image: lphoward/fake-s3
        resources: {}
        ports:
        - containerPort: 4569
